[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\jchemile\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\jchemile\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Eclipse Adoptium Java 11.0.16.1)
[debug]       Load.loadUnit: plugins took 87.8878ms
[debug]       Load.loadUnit: defsScala took 0.2415ms
[debug] [Loading] Scanning directory C:\Users\jchemile\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\jchemile\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.4121 ms
[debug]           Load.resolveProject(global-plugins) took 49.263ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\jchemile\.sbt\1.0\plugins, plugins: List(<none>))) took 93.9898ms
[debug] [Loading] Done in C:\Users\jchemile\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 115.3204ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2207ms
[debug]     Load.loadUnit(file:/C:/Users/jchemile/.sbt/1.0/plugins/, ...) took 211.5424ms
[debug]   Load.apply: load took 450.0798ms
[debug]   Load.apply: resolveProjects took 6.8215ms
[debug]   Load.apply: finalTransforms took 59.5959ms
[debug]   Load.apply: config.delegates took 6.8424ms
[debug]   Load.apply: Def.make(settings)... took 412.2765ms
[debug]   Load.apply: structureIndex took 89.8262ms
[debug]   Load.apply: mkStreams took 1.4738ms
[info] loading global plugins from C:\Users\jchemile\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3856.3949ms
[debug]           Load.loadUnit: plugins took 20.4441ms
[debug]           Load.loadUnit: defsScala took 0.0044ms
[debug] [Loading] Scanning directory C:\Users\jchemile\Documents\spark-code-snippets\project
[debug]             Load.loadUnit: mkEval took 7.3852ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\jchemile\Documents\spark-code-snippets\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3976 ms
[info] loading settings for project spark-code-snippets-build from idea.sbt ...
[debug]               Load.resolveProject(spark-code-snippets-build) took 3.1501ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-code-snippets-build, base: C:\Users\jchemile\Documents\spark-code-snippets\project, plugins: List(<none>))) took 5.0917ms
[debug] [Loading] Done in C:\Users\jchemile\Documents\spark-code-snippets\project, returning: (spark-code-snippets-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2086.0231ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.1431ms
[debug]         Load.loadUnit(file:/C:/Users/jchemile/Documents/spark-code-snippets/project/, ...) took 2111.6154ms
[debug]       Load.apply: load took 2113.4611ms
[debug]       Load.apply: resolveProjects took 0.1245ms
[debug]       Load.apply: finalTransforms took 9.2743ms
[debug]       Load.apply: config.delegates took 0.4209ms
[debug]       Load.apply: Def.make(settings)... took 73.244ms
[debug]       Load.apply: structureIndex took 20.1802ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\jchemile\Documents\spark-code-snippets\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3788.7438ms
[debug]     Load.loadUnit: defsScala took 0.0055ms
[debug] [Loading] Scanning directory C:\Users\jchemile\Documents\spark-code-snippets
[debug]       Load.loadUnit: mkEval took 0.2183ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.6775 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 26.6406ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\jchemile\Documents\spark-code-snippets, plugins: List(<none>))) took 30.3368ms
[debug] [Loading] Done in C:\Users\jchemile\Documents\spark-code-snippets, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1267.4248ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.4534ms
[debug]   Load.loadUnit(file:/C:/Users/jchemile/Documents/spark-code-snippets/, ...) took 5065.2478ms
[debug] Load.apply: load took 5066.6896ms
[debug] Load.apply: resolveProjects took 0.0865ms
[debug] Load.apply: finalTransforms took 24.2074ms
[debug] Load.apply: config.delegates took 0.2393ms
[debug] Load.apply: Def.make(settings)... took 57.1607ms
[debug] Load.apply: structureIndex took 25.2432ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to spark-code-snippets (in build file:/C:/Users/jchemile/Documents/spark-code-snippets/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63505 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63505, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to spark-code-snippets (in build file:/C:/Users/jchemile/Documents/spark-code-snippets/)
[debug] > Exec(idea-shell, None, None)
